package mylog

import (
	"context"

	log "github.com/sirupsen/logrus"
)

// EntryKey type of entryKey
type EntryKey string

var entryKey EntryKey = "logEntry"

// Entry entry for log write
type Entry struct {
	*log.Entry

	weEntry *log.Entry
}

// GetEntryWithFields return an entry with fileds, inherit origin fields
func (e *Entry) GetEntryWithFields(m map[string]interface{}) *Entry {
	entry := &Entry{Entry: e.getEntry(m, false)}
	if e.weEntry != nil {
		entry.weEntry = e.getEntry(m, true)
	}

	return entry
}

func (e *Entry) getEntry(m map[string]interface{}, isWE bool) *log.Entry {
	if isWE {
		return e.weEntry.WithFields(log.Fields(m))
	}

	return e.Entry.WithFields(log.Fields(m))
}

// GetField return field of key
func (e *Entry) GetField(key string) interface{} {
	return e.Entry.Data[key]
}

// Debugf log with debug level
func (e *Entry) Debugf(format string, v ...interface{}) {
	e.Entry.Debugf(format, v...)
}

// Infof log with info level
func (e *Entry) Infof(format string, v ...interface{}) {
	e.Entry.Infof(format, v...)
}

// Warnf log with warn level
func (e *Entry) Warnf(format string, v ...interface{}) {
	e.Entry.Warnf(format, v...)
	if e.weEntry != nil {
		e.weEntry.Warnf(format, v...)
	}
}

// Errorf log with error level
func (e *Entry) Errorf(format string, v ...interface{}) {
	e.Entry.Errorf(format, v...)
	if e.weEntry != nil {
		e.weEntry.Errorf(format, v...)
	}
}

// Fatalf log with fatal level
func (e *Entry) Fatalf(format string, v ...interface{}) {
	e.Entry.Fatalf(format, v...)
	if e.weEntry != nil {
		e.weEntry.Fatalf(format, v...)
	}
}

// GetCtxEntry get entry from context; if no entry in context, return a new entry generated by log
func GetCtxEntry(ctx context.Context, log MyLogger) *Entry {
	entry, ok := ctx.Value(entryKey).(*Entry)
	if !ok {
		return log.GetEntryWithFields(nil)
	}

	return entry
}

// SetCtxEntry set entry into context
func SetCtxEntry(ctx context.Context, e *Entry) context.Context {
	return context.WithValue(ctx, entryKey, e)
}
